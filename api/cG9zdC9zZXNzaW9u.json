{"title":"session","date":"2019-01-08T12:15:34.000Z","slug":"session","tags":["Django"],"categories":["Python"],"updated":"2019-01-08T12:19:45.130Z","content":"<p><strong>HTTP协议是无状态的：</strong><br><strong>•    每次请求都是一次新的请求，不会记得之前通信的状态</strong><br><strong>•    客户端与服务器端的一次通信，就是一次会话</strong><br><strong>•    实现状态保持的方式：在客户端或服务器端存储与会话有关的数据</strong><br><strong>•    状态保持的目的是在一段时间内跟踪请求者的状态，可以实现跨页面访问当前请求者的数据</strong><br><strong>• 不同的请求者之间不会共享这个数据，与请求者一一对应</strong></p>\n<p><strong>Cookie</strong><br><strong>•    存储在用户的浏览器中,用户提交的数据具有’欺骗性’,所以cookie不是很安全</strong><br><strong>•单个cookie保存的数据不能超过4K</strong></p>\n<p><strong>Session</strong><br><strong>•    存储在服务器(文件,数据库,缓存|内存)</strong><br><strong>•    每一个数据产生一个key session_id 就存储在浏览器的cookie</strong><br><strong>•    数据存在服务器,不容易被暴露信息,比cookie更安全.</strong></p>\n<p><strong>cookie:包括名字,值,过期时间,路径和域;</strong></p>\n<p><strong>①.会话cookie:如果cookie不设置过期时间,则会话cookie会被保存在浏览器内存中,生命周期为浏览器会话期间,当关闭浏览器时,cookie就会被删除.</strong></p>\n<p><strong>②.持久cookie:设置了过期时间的cookie会被保存在硬盘里,关闭浏览器后再次打开cookie依然有效,直到超过有效时间</strong></p>\n<p><strong>Session:客户端浏览器访问服务器,服务器检查会话是否已有sessionid,没有则新建一个唯一不重复的sessionid,在本次响应中返回给客户端cookie里保存起来.</strong></p>\n<p><strong>Session是用Sessionid来确定当前对话所对应的服务器Session，而Sessionid是通过Cookie来传递的，禁用Cookie相当于失去了Sessionid，也就得不到Session了。当cookie被禁用时,可以使用URL重写,将sessionid附加在URL路径的后面;或者给表单添加一个input设置为hiddle,将value的值设置为sessionid,提交到后台服务器.</strong></p>\n<h1 id=\"使用cookie\"><a href=\"#使用cookie\" class=\"headerlink\" title=\"使用cookie\"></a><strong>使用cookie</strong></h1><p> <strong># 获取当前的 响应对象</strong></p>\n<p> <strong>response = HttpResponse(‘cookie的设置’)</strong></p>\n<p> <strong># 使用响应对象进行cookie的设置</strong></p>\n<p> <strong>response.set_cookie(‘a’,’abc’)</strong></p>\n<p> <strong># 返回响应对象</strong></p>\n<p> <strong>return response</strong></p>\n<p><strong>获取cookie</strong></p>\n<p><strong>a = request.COOKIES.get(‘a’,None)</strong></p>\n<h1 id=\"session的设置方法\"><a href=\"#session的设置方法\" class=\"headerlink\" title=\"session的设置方法:\"></a><strong>session的设置方法:</strong></h1><p><strong>request.session[‘键’]= {}或=字符串</strong></p>\n<p><strong>request.session[‘VIPUser’] = {“uid”:”10086”,”name”:”张三”}</strong></p>\n<p><strong>request.session[‘admin’] = ‘aabbcc’</strong></p>\n<h3 id=\"session的获取方法\"><a href=\"#session的获取方法\" class=\"headerlink\" title=\"session的获取方法:\"></a><strong>session的获取方法:</strong></h3><p><strong>request.session.get(‘VIPUser’)</strong></p>\n<p><strong>request.session.get(‘admin’)</strong></p>\n<h3 id=\"session的删除方法\"><a href=\"#session的删除方法\" class=\"headerlink\" title=\"session的删除方法\"></a><strong>session的删除方法</strong></h3><p><strong>删除单个key</strong></p>\n<p><strong>del request.session[‘a’]</strong></p>\n<p><strong>清除所有会话,但不会删除数据</strong></p>\n<p><strong>request.session.clear()</strong></p>\n<p><strong>删除当前的会话数据</strong></p>\n<p><strong>request.session.flush()</strong></p>\n<p><strong>设置session100秒后过期</strong></p>\n<p> <strong># request.session[‘abc’] = ‘abcdef’</strong>   </p>\n<p> <strong># request.session.set_expiry(100)</strong></p>\n","next":{"title":"Django模型层","slug":"ORM"},"link":"http://yoursite.com/post/session/","toc":[{"title":"<strong>使用cookie</strong>","id":"使用cookie","index":"1"},{"title":"<strong>session的设置方法:</strong>","id":"session的设置方法","index":"2"}]}