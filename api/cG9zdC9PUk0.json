{"title":"Django模型层","date":"2019-01-03T04:20:57.000Z","slug":"ORM","categories":["python"],"updated":"2019-01-03T10:09:04.728Z","content":"<h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><ul>\n<li>objects：管理器，默认模型的属性</li>\n<li>ORM(objects relationship mapping)：对象关系映射</li>\n</ul>\n<h3 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h3><ul>\n<li><p>create()方法：模型名.objects.create(字段1=值，字段2=值,…)</p>\n</li>\n<li><blockquote>\n<p>Student.objects.create(s_name=’小明’)</p>\n</blockquote>\n</li>\n<li><p>save()方法：模型对象.save()</p>\n</li>\n<li><blockquote>\n<p>stu = Student()</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>stu.s_name = ‘小蓝’</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>stu.s_gender = 1</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>stu.save()</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h3><ul>\n<li><p>delete()方法：模型名.objects.filter(条件).delete()</p>\n</li>\n<li><blockquote>\n<p>Student.objects.filter(id=3).delete()</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"修改\"><a href=\"#修改\" class=\"headerlink\" title=\"修改\"></a>修改</h3><ul>\n<li><p>update()方法：模型名.objects.filter(条件).update(字段1=值，字段2=值,…)</p>\n</li>\n<li><blockquote>\n<h1 id=\"Student-objects-filter-id-4-update-s-name-’张三’\"><a href=\"#Student-objects-filter-id-4-update-s-name-’张三’\" class=\"headerlink\" title=\"Student.objects.filter(id=4).update(s_name=’张三’)\"></a>Student.objects.filter(id=4).update(s_name=’张三’)</h1></blockquote>\n</li>\n<li><p>save()方法：模型对象.save()</p>\n</li>\n<li><blockquote>\n<p>stu = Student.objects.filter(id=4).first()</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>stu.s_name = ‘张三2’</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>stu.save()</p>\n</blockquote>\n</li>\n<li><p>update()和save()的区别：是否更新使用auto_now约束条件的字段</p>\n</li>\n</ul>\n<h3 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h3><ul>\n<li><p>filter()方法，查询满足条件的信息：模型名.objects.filter(条件)</p>\n</li>\n<li><p>all()方法：查询所有</p>\n</li>\n<li><blockquote>\n<p>stus = Student.objects.all()</p>\n</blockquote>\n</li>\n<li><p>get()方法：查询指定的条件</p>\n<ul>\n<li><p>只能返回唯一的一个对象结果</p>\n</li>\n<li><p>条件必须成立</p>\n</li>\n<li><blockquote>\n<h1 id=\"get（）取唯一的一个对象\"><a href=\"#get（）取唯一的一个对象\" class=\"headerlink\" title=\"get（）取唯一的一个对象\"></a>get（）取唯一的一个对象</h1></blockquote>\n</li>\n<li><blockquote>\n<h1 id=\"get（条件）条件必须成立（会报错）\"><a href=\"#get（条件）条件必须成立（会报错）\" class=\"headerlink\" title=\"get（条件）条件必须成立（会报错）\"></a>get（条件）条件必须成立（会报错）</h1></blockquote>\n</li>\n<li><blockquote>\n<p>stu = Student.objects.get(id=2)  # 建议少用，一般使用filter（条件</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>first()方法：取出结果中的第一个对象</p>\n</li>\n<li><blockquote>\n<p>stu = Student.objects.filter(id=2).first()</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>print(stu)</p>\n</blockquote>\n</li>\n<li><p>exclude()方法：查询出不满足条件的信息：模型名.objects.exclude(条件)</p>\n</li>\n<li><blockquote>\n<p>stus = Student.objects.exclude(s_gender=0)  # exclude(s_gender=0)不包含女生</p>\n</blockquote>\n</li>\n<li><p>oder_by()方法：升序order_by(‘id’) 降序order_by(‘-id’)</p>\n</li>\n<li><blockquote>\n<p>stus = Student.objects.order_by(‘id’)</p>\n</blockquote>\n</li>\n<li><p>values()方法：取查询对象中的字段</p>\n</li>\n<li><blockquote>\n<p>stus = Student.objects.all().values()  # 全部的字段</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>stus = Student.objects.all().values(‘s_name’, ‘s_age’)  # 只取名字和年龄字段</p>\n</blockquote>\n</li>\n<li><p>exists()：判断结果是否存在，存在返回Ture,否则返回False</p>\n</li>\n<li><blockquote>\n<p>a = Student.objects.filter(s_name=’小张’).exists()</p>\n</blockquote>\n</li>\n<li><p>count()方法：计算结果有多少数据</p>\n</li>\n<li><blockquote>\n<p>b = Student.objects.filter(s_gender=1).count()</p>\n</blockquote>\n</li>\n<li><p>pk 主键(就是id)</p>\n</li>\n<li><blockquote>\n<h1 id=\"sql-where-id-in-1-2-3-4-5-6-7-8\"><a href=\"#sql-where-id-in-1-2-3-4-5-6-7-8\" class=\"headerlink\" title=\"sql where id in (1,2,3,4,5,6,7,8)\"></a>sql where id in (1,2,3,4,5,6,7,8)</h1></blockquote>\n</li>\n<li><blockquote>\n<p>stus = Student.objects.filter(id__in=[1, 2, 3, 4])  # id字段</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>stus = Student.objects.filter(pk__in=[1, 2, 3, 4])  # pk代表主键</p>\n</blockquote>\n</li>\n<li><p>运算符</p>\n<ul>\n<li><p>filter(字段__contains=’’)  模糊查询</p>\n</li>\n<li><blockquote>\n<h1 id=\"语法：字段-运算符-：-查询包含‘小明’的所有字符的字段\"><a href=\"#语法：字段-运算符-：-查询包含‘小明’的所有字符的字段\" class=\"headerlink\" title=\"语法：字段__运算符 ： 查询包含‘小明’的所有字符的字段\"></a>语法：字段__运算符 ： 查询包含‘小明’的所有字符的字段</h1></blockquote>\n</li>\n<li><blockquote>\n<p>stus = Student.objects.filter(s_name__contains=’小明’)</p>\n</blockquote>\n</li>\n<li><p>startswith：以什么开头</p>\n</li>\n<li><blockquote>\n<p>stus = Student.objects.filter(s_name__startswith=’小’)</p>\n</blockquote>\n</li>\n<li><p>endswith：以什么结尾</p>\n</li>\n<li><blockquote>\n<p>stus = Student.objects.filter(s_name__endswith=’明’)</p>\n</blockquote>\n</li>\n<li><p>in：在某个范围之内</p>\n</li>\n<li><p>gt，gte：大于，大于等于</p>\n</li>\n<li><p>lt，lte：小于，小于等于</p>\n</li>\n<li><p>并且</p>\n</li>\n<li><blockquote>\n<p>stus = Student.objects.filter(s_age__gte=18, s_age__lt=20)</p>\n</blockquote>\n</li>\n<li><blockquote>\n<h1 id=\"或者-stus-Student-objects-filter-s-age-gte-18-filter-s-age-lt-20\"><a href=\"#或者-stus-Student-objects-filter-s-age-gte-18-filter-s-age-lt-20\" class=\"headerlink\" title=\"或者 stus = Student.objects.filter(s_age__gte=18).filter(s_age__lt=20)\"></a>或者 stus = Student.objects.filter(s_age__gte=18).filter(s_age__lt=20)</h1></blockquote>\n</li>\n</ul>\n</li>\n<li><p>聚合</p>\n<ul>\n<li><p>from django.db.models import Max，Avg，Min，Sum</p>\n</li>\n<li><p>语法：模型名.objects.all().aggregate(Sum(字段))</p>\n</li>\n<li><blockquote>\n<p>age_avg = Student.objects.all().aggregate(Avg(‘s_age’))</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>age_sum = Student.objects.all().aggregate(Sum(‘s_age’))</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>Q</p>\n<ul>\n<li><p>与1：Q(条件1),Q(条件2)</p>\n</li>\n<li><blockquote>\n<p>stus = Student.objects.filter(s_age__gte=18, s_age__lt=20)</p>\n</blockquote>\n</li>\n<li><p>与2：Q(条件1) &amp; Q(条件2)</p>\n</li>\n<li><blockquote>\n<p>stus = Student.objects.filter(Q(s_age__gte=18) &amp; Q(s_age__lt=20))</p>\n</blockquote>\n</li>\n<li><p>或：Q(条件1) | Q(条件2)</p>\n</li>\n<li><blockquote>\n<p>stus = Student.objects.filter(Q(s_age__gte=18) | Q(s_age__lt=20))</p>\n</blockquote>\n</li>\n<li><p>非：~Q(条件)</p>\n</li>\n<li><blockquote>\n<p>stus = Student.objects.filter(~Q(s_age__gte=18))</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>F</p>\n<ul>\n<li>用于比较两个字段，可使用+,-符号</li>\n<li>模型名.objects.filter(wuli__gt=F(‘math’) + 10)</li>\n</ul>\n</li>\n</ul>\n","prev":{"title":"session","slug":"session"},"next":{"title":"windows下 python 'No module named pip'","slug":"NoModule"},"link":"http://yoursite.com/post/ORM/","toc":[{"title":"Student.objects.filter(id=4).update(s_name=’张三’)","id":"Student-objects-filter-id-4-update-s-name-’张三’","index":"1"},{"title":"get（）取唯一的一个对象","id":"get（）取唯一的一个对象","index":"2"},{"title":"get（条件）条件必须成立（会报错）","id":"get（条件）条件必须成立（会报错）","index":"3"},{"title":"sql where id in (1,2,3,4,5,6,7,8)","id":"sql-where-id-in-1-2-3-4-5-6-7-8","index":"4"},{"title":"语法：字段__运算符 ： 查询包含‘小明’的所有字符的字段","id":"语法：字段-运算符-：-查询包含‘小明’的所有字符的字段","index":"5"},{"title":"或者 stus = Student.objects.filter(s_age__gte=18).filter(s_age__lt=20)","id":"或者-stus-Student-objects-filter-s-age-gte-18-filter-s-age-lt-20","index":"6"}]}