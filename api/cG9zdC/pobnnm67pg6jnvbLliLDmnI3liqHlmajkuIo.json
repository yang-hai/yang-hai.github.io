{"title":"项目部署到服务器上的步骤","date":"2019-01-19T10:17:41.000Z","slug":"项目部署到服务器上","categories":["Linux"],"updated":"2019-01-19T10:18:49.064Z","content":"<p>项目部署到云服务器的步骤<br>1.在/home/下创建四个文件夹  conf env logs src<br>2.在env中创建对应的虚拟环境<br>3.将本地的项目上传到src文件夹下<br>4.直接使用对应项目绝对路径下的pip3 参照对应绝对路径下的requirement.txt文件安装 需要的第三方库<br>5.将本地数据库的数据传输到服务器上<br>6.更改项目配置文件的ALLOWED_HOST = [‘<em>‘]<br>7.在不需要做登录校验的路径中添加[‘/static/.</em>‘, ‘/media/.*’] 如果有其他不需要做校验路径访问失败，继续添加<br>做到这一步就可以运行了<br>命令：对应python的绝对路径 对应manage.py的绝对路径 runserver 0.0.0.0:端口 设置0.0.0.0表示任何人都可以访问     后面加 ‘&amp;’ 放到后台执行<br>例如：/home/env/blogback/bin/python3 /home/src/bgback/manage.py runserver 0.0.0.0:8080</p>\n<p>8.项目上线需要将配置文件中的DEBUG的值改为fasle<br>改了过后，清空浏览器缓存，重新访问页面没有样式，这时需要修改项目的urls.py的配置<br>添加一下内容：<br>from django.urls import re_path<br>from blogback.settings import STATICFILES_DIRS<br>from django.views.static import serve<br>urlpatterns = [<br>re_path(r’^static/(?P<path>.<em>)$’, serve, {“document_root”: STATICFILES_DIRS[0]}),<br>re_path(r’^media/(?P<path>.</path></em>)$’, serve, {“document_root”: MEDIA_ROOT}),<br>]</path></p>\n<p>9.在项目父目录下创建一个文件    项目名.sh<br>在其中添加项目运行命令<br>/home/env/blogback/bin/python3 /home/src/blogback/manage.py runserver 0.0.0.0:8080</p>\n<p>再给他授权<br>chmod -R 777 项目名.sh</p>\n<p>最后用nohup ./项目名.sh &amp;  去挂载它</p>\n<p>10.nohup输出重定向：<br>在shell中,文件描述符通常是:STDIN标准输入,STDOUT标准输出,STDERR标准错误输出,即:0,1,2,</p>\n<p>例子：nohup abc.sh &gt; nohup.log 2&gt;&amp;1 &amp;</p>\n<p>其中2&gt;&amp;1  指将STDERR重定向到前面标准输出定向到的同名文件中，即&amp;1就是nohup.log</p>\n<p>那么结果就是当执行的命令发生标准错误，那么这个错误也会输出到你指定的输出文件中 </p>\n<p>nohup把abc.sh的输出重定向到文件nohup.log 同时出现错误也输出到nohup.log ，然后后台执行。</p>\n","prev":{"title":"nginx+django+uwsgi","slug":"nginx-django-uwsgi"},"next":{"title":"用命令进行文件传输","slug":"用命令进行文件传输"},"link":"http://yoursite.com/post/项目部署到服务器上/"}